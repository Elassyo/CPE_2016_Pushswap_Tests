#!/usr/bin/python3

import os
import subprocess
import sys

def print_msg(test_group, test_name, n, msg):
	print('\r  {} #{}: {:<30}'.format(test_name, n, msg), end='', flush=True)

def print_ko(test_group, test_name, n, msg):
	print_msg(tests_group, test_name, n, 'KO')
	print('\n    {}'.format(msg))

def print_trace(stdout, stderr):
	if (trace):
		if (len(stdout) > 0):
			print('-- begin trace (stdout) --')
			print(stdout.decode(), end='', flush=True)
			print('--  end trace (stdout)  --')
		if (len(stderr) > 0):
			print('-- begin trace (stderr) --')
			print(stderr.decode(), end='', flush=True)
			print('--  end trace (stderr)  --')

def validate(test_group, test_data, ps_stdout):
	args = [ './validate' ] + test_data.split(' ')
	try:
		proc = subprocess.Popen(args, shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
		stdout = proc.communicate(input=ps_stdout, timeout=test_group['validate-to'])[0]
	except FileNotFoundError:
		return (1, 'Execution error: ./validate: no such file or directory')
	except subprocess.TimeoutExpired:
		proc.kill()
		stdout = proc.communicate()[0]
		return (1, 'Crashed: ./validate timed out')
	return proc.returncode, stdout.decode()

def do_tests(test_group):
	print()
	passed = 0

	try:
		test_files = os.listdir(tests_group['dir'])
		test_files.sort()
	except:
		print('Invalid test group path: {}'.format(tests_group['dir']))
		exit(2)

	n = 0
	test_group['count'] = len(test_files)
	print('{} tests - {} tests'.format(test_group['name'].capitalize(), test_group['count']))

	for test_file_name in test_files:
		n += 1
		print_msg(test_group, test_file_name, n, 'Loading test data')
		try:
			test_file = open(test_group['dir'] + '/' + test_file_name, 'r')
			test_data = test_file.read()
			test_file.close()
		except:
			print('\nFailed to load test data')
			exit(2)

		if test_data.endswith('\n'):
			test_data = test_data[:-1]
		if test_data.endswith(' '):
			test_data = test_data[:-1]
		args = [ 'ltrace', './push_swap' ] + test_data.split(' ')

		print_msg(test_group, test_file_name, n, 'Running push_swap')
		try:
			proc = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
			stdout, stderr = proc.communicate(timeout=test_group['pushswap-to'])
		except FileNotFoundError:
			print_ko(test_group, test_file_name, n, 'Execution error: ./push_swap: no such file or directory')
			continue
		except subprocess.TimeoutExpired:
			proc.kill()
			stdout, stderr = proc.communicate()
			print_ko(test_group, test_file_name, n, 'Crash: ./push_swap timed out')
			print_trace(stdout, stderr)
			continue
		if (proc.returncode != 0):
			print_ko(test_group, test_file_name, n, 'Crash: return code = {}'.format(proc.returncode))
			print_trace(stdout, stderr)
			continue

		print_msg(test_group, test_file_name, n, 'Checking output')
		ret, msg = validate(test_group, test_data, stdout)
		if ret == 0:
			print_msg(test_group, test_file_name, n, 'OK')
			print('\n    ' + msg)
		else:
			print_ko(test_group, test_file_name, n, '    ' + msg)
		passed += 1
	return passed == test_group['count']



os.environ['MALLOC_CHECK_'] = '0'

print('B-CPE-084 pushswap\n')

print('> make')
proc = subprocess.Popen('make', shell=True)
proc.wait()

tests_groups = [{
	'name': 'base',
	'dir': 'base_tests',
	'pushswap-to': 10,
	'validate-to': 3
},{
	'name': 'intermediate',
	'dir': 'intermediate_tests',
	'pushswap-to': 10,
	'validate-to': 3
}]

trace = False
force = False
for arg in sys.argv:
	if arg == '-f':
		force = True
	if arg == '-t':
		trace = True

for tests_group in tests_groups:
	if not do_tests(tests_group) and not force:
		exit(1)
